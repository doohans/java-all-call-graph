# 현재 응용 프로그램의 호출 관계는 데이터베이스의 테이블 이름 접미사에 기록됩니다.구분자는 사용할 수 없습니다 -, _를 사용해야 합니다
# app.name=test_app_name
app.name=

# 동시 처리 스레드 수/데이터 소스 연결 풀 수(처리할 태스크 수를 초과하는 경우 태스크 수를 스레드 수로 사용)
thread.num=20

# H2 데이터베이스 사용 여부, true/false
db.use.h2=true

# H2 데이터베이스 파일 경로(H2 데이터베이스를 사용할 때만 필요), 예: ./build/jacg_h2db, ".mv.db"를 지정할 필요 없음
db.h2.file.path=./build/jacg_h2db

#Database 구성(H2가 아닌 데이터베이스를 사용할 때만 필요)
db.driver.name=com.mysql.cj.jdbc.Driver
#MySQL 을 사용할 때 일괄 삽입을 활성화하고 효율성을 높이려면 url이 rewriteBatchedStatements=true를 지정해야 합니다. 기본적으로 활성화되어 있지 않습니다.
# db.url=jdbc:mysql://1.1.1.1:3306/test_db?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true
# db.username=test_username
# db.password=test_password
db.url=
db.username=
db.password=

#java- callgraph2 를 통해 호출 관계 파일의 jar 패키지를 생성하거나 공백으로 구분된 클래스 및 jar 파일의 디렉토리 목록을 저장해야 합니다.
# call.graph.jar.list=build/libs/xxx.jar
call.graph.jar.list=

# 호출 관계 및 클래스 이름을 데이터베이스에 작성할 때 지정되지 않은 패키지의 클래스를 무시할지 여부, true/false
input.ignore.other.package=false

# 콜 체인 생성 시의 자세한 정보
# 1: 가장 상세하고 완전한 클래스 이름 + 메소드 이름 + 메소드 매개변수
# 2: 중간 전체 클래스 이름 + 메소드 이름
# 3: 가장 단순하고 단순한 클래스 이름(동일한 이름을 가진 클래스의 전체 클래스 이름 표시) + 메서드 이름
call.graph.output.detail=2

# 콜체인 생성시 메소드 어노테이션 표시 여부 true/false
show.method.annotation=true

# # 콜 체인을 생성할 때 병합된 파일을 생성，true/false
gen.combined.output=true

# 콜체인 생성시 호출자의 소스코드 줄번호 표시 여부，true/false
show.caller.line.num=true

# 하향 호출 체인 생성 시 호출 메소드에 여러 개의 호출된 메소드(커스텀 데이터 포함)가 있는 경우 무시해야 하는지 여부 true/false，true/false
ignore.dup.callee.in.one.caller=false
